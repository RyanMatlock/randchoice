#!/usr/bin/env python3
"""randchoice

Pick an option from list passed in through stdin and/or arguments passed to the
script.
"""

import sys
import logging
import random
import termcolor
import argparse

logging.basicConfig(level=logging.WARNING)

EXIT_SUCCESS, EXIT_FAILURE = 0, 1


def main():
    options = []

    if not sys.stdin.isatty():
        options += [line.strip() for line in sys.stdin.readlines()]

    parser = argparse.ArgumentParser(
        description=str(
            'Randomly choose an option from lines passed by stdin or from '
            'options passed as arguments.'
        )
    )
    parser.add_argument(
        '-d',
        '--debug',
        action='store_true',
        help='turn on debugging mode'
    )
    parser.add_argument(
        '-c',
        '--choose',
        metavar='N',
        type=int,
        default=1,
        help='number of items to choose, assuming N ≤ len(options)'
    )
    parser.add_argument(
        '-n',
        '--newline',
        dest='suppress_newline',
        action='store_true',
        help='suppress trailing newline for plain printing'
    )
    parser.add_argument(
        '-p',
        '--plain',
        action='store_true',
        help='plain output (automatic if sys.stdout.isatty() is False)'
    )
    parser.add_argument(
        'options',
        nargs='*',
        help='list of options from which to randomly choose'
    )

    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    logging.debug(f'args: {args}')

    options += args.options
    num_choices = args.choose

    logging.debug(f'options: {options}')
    random.seed()

    if num_choices > len(options):
        raise ValueError(
            f'Number of choices requested exceeds ({num_choices}) number of '
            f'options available ({len(options)}).'
        )

    selections = []
    for _ in range(num_choices):
        choice = random.choice(options)
        options.remove(choice)
        selections.append(choice)
    logging.debug(f'selections: {selections}')
    logging.debug(f'(remaining) options: {options}')

    if sys.stdout.isatty() and not args.plain:
        styled_selection = termcolor.colored(
            f' {", ".join(selections)} ',
            attrs=['bold', 'reverse']
        )

        if num_choices > 1:
            lead_in = 'The choices are '
        else:
            lead_in = 'The choice is '

        print(
            '\n'
            f'{lead_in}{styled_selection}'
            '\n'
        )
    else:
        endline = '' if args.suppress_newline else '\n'
        print('\n'.join(selections), end=endline)

    return EXIT_SUCCESS


if __name__ == '__main__':
    try:
        sys.exit(main())
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(EXIT_FAILURE)
