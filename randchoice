#!/usr/bin/env python3
"""randchoice

Read lines from stdin or choose from arguments passed to script and print a
choice from one of those options.
"""

import sys
import logging
import random
import termcolor
import argparse

logging.basicConfig(level=logging.DEBUG)

EXIT_SUCCESS, EXIT_FAILURE = 0, 1


def main():
    if len(sys.argv) == 1:
        options = []
        for line in sys.stdin:
            options.append(line.strip())
    else:
        parser = argparse.ArgumentParser(
            description=str(
                'Randomly choose an option from lines passed by stdin or from '
                'options passed as arguments.'
            )
        )
        parser.add_argument(
            '-n',
            action='store_true',
            help='suppress trailing newline for plain printing'
        )
        print_style = parser.add_mutually_exclusive_group()
        print_style.add_argument(
            '-p',
            '--pretty',
            dest='pretty',
            action='store_true',
            default=True,
            help='pretty output (default)'
        )
        print_style.add_argument(
            '-P',
            '--plain',
            dest='pretty',
            action='store_false',
            help='plain output'
        )
        parser.add_argument(
            'options',
            nargs='+',
            help='list of options from which to randomly choose'
        )
        args = parser.parse_args()
        logging.debug(f'args: {args}')

        options = sys.argv[1:]

    logging.debug(f'options: {options}')
    random.seed()

    try:
        selection = random.choice(options)
    except IndexError:
        print('No options provided.', file=sys.stderr)
        return EXIT_FAILURE

    logging.debug(f'selection: {selection}')

    if sys.stdout.isatty():
        styled_selection = termcolor.colored(
            f' {selection} ',
            attrs=['bold', 'reverse']
        )
        print(
            '\n'
            f'The choice is {styled_selection}'
            '\n'
        )
    else:
        print(selection)

    return EXIT_SUCCESS


if __name__ == '__main__':
    sys.exit(main())
