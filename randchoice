#!/usr/bin/env python3
"""randchoice

Pick an option from list passed in through stdin and/or arguments passed to the
script.
"""

import sys
import logging
import random
import termcolor
import argparse

logging.basicConfig(level=logging.WARNING)

EXIT_SUCCESS, EXIT_FAILURE = 0, 1


def main():
    options = []

    if not sys.stdin.isatty():
        options += [line.strip() for line in sys.stdin.readlines()]

    parser = argparse.ArgumentParser(
        description=str(
            'Randomly choose an option from lines passed by stdin or from '
            'options passed as arguments.'
            )
        )
    parser.add_argument(
        '-n',
        dest='suppress_newline',
        action='store_true',
        help='suppress trailing newline for plain printing'
        )
    print_style = parser.add_mutually_exclusive_group()
    print_style.add_argument(
        '-p',
        '--pretty',
        dest='pretty',
        action='store_true',
        default=True,
        help='pretty output to terminal (default)'
        )
    print_style.add_argument(
        '-P',
        '--plain',
        dest='pretty',
        action='store_false',
        help='plain output'
        )
    parser.add_argument(
        'options',
        nargs='*',
        help='list of options from which to randomly choose'
        )

    args = parser.parse_args()
    logging.debug(f'args: {args}')

    options += args.options

    logging.debug(f'options: {options}')
    random.seed()

    try:
        selection = random.choice(options)
    except IndexError:
        print('Error: no options provided.', file=sys.stderr)
        parser.print_help()
        return EXIT_FAILURE

    logging.debug(f'selection: {selection}')

    if sys.stdout.isatty() and args.pretty:
        styled_selection = termcolor.colored(
            f' {selection} ',
            attrs=['bold', 'reverse']
        )
        print(
            '\n'
            f'The choice is {styled_selection}'
            '\n'
        )
    else:
        endline = '' if args.suppress_newline else '\n'
        print(selection, end=endline)

    return EXIT_SUCCESS


if __name__ == '__main__':
    sys.exit(main())
